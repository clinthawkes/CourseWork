{
	"info": {
		"_postman_id": "d4bed2d3-8ed4-4a12-9b06-28cccf9f61a0",
		"name": "hw3-marina",
		"description": "This collection tests the API specification given for Assignment 3.\nIn order to run this collection, you need an environment which has the following 3 environment variables pre-defined:\n\napp_url\n- Set this to your app. E.g., when running locally set it to http://localhost:8080. When running the app on GCP. set it to https://myapp.appsport.com\n\ninvalid_boat_id\n- Set it to a value that's not an ID of any boat in your project. I have set it to 1 and that should work for you as well.\n- \n\ninvalid_slip_id\n- Set it to a value that's not an ID of any slip in your porject. I have set it to 1 and that should work for you as well.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "add boat 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ba071318-232d-400b-b919-10071c6cbbc8",
						"exec": [
							"pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with missing attributes 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c265131d-a684-4a8c-bfcc-663bdb980657",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90ab8eb9-ad4f-4969-8a29-d3b28177cf27",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat wiht invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "71e782e8-60d1-4c63-9a7d-bc3fd13ab682",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6933c2d6-3399-470e-b3a6-9e19117bdd3f",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"At least one boat exists\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit boat 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4e438d2b-5953-4f75-a2d9-06c8c81fda1f",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey II\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Mega Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit boat with missing attributes 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec000749-1162-4ece-8232-37764f4085d0",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit boat with invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "669239fe-8c86-46e5-81d0-edd070130618",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n   \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add slip 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "99705e38-86b2-4981-ae03-a6b77073efc1",
						"exec": [
							"pm.environment.set(\"slip_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"number\"]).to.eq(1);",
							"    pm.expect(pm.response.json()[\"current_boat\"]).to.eq(null);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"number\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "add slip with missing attribute 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79db4a5b-9633-467a-906f-0dba32625101",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing the required number\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "get slip 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c47f21a8-9633-4876-a28e-c555bc75e1f7",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"number\"]).to.eq(1);",
							"     pm.expect(pm.response.json()[\"current_boat\"]).to.eq(null);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get slip with invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bfb279a3-e9ea-4d6f-b16e-d49b433b910e",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No slip with this slip_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{invalid_slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{invalid_slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all slips 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b4d0712d-b600-4419-9361-2ea29b2c9896",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"At least one boat exists\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat  arrives at slip 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fafab6f9-e13f-4b5d-8c9f-f5651ee6fc74",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat arrives at non-empty slip 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "34601993-fc41-4d13-824e-8fbf7897743f",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The slip is not empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid boat id arrives at slip 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac93f157-008a-4b76-8c69-889fbec67cd8",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or slip does not exist\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat arrives at invalid slip 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ab9de3be-9f1d-451c-a7ea-f5810a9553e3",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or slip does not exist\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{invalid_slip_id}}/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{invalid_slip_id}}",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid boat arrives at invalid slip 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e494b5c-08e3-42b6-8e16-3529410626f2",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or slip does not exist\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{invalid_slip_id}}/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{invalid_slip_id}}",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get slip with a current boat 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "74b834f8-4f3d-41ab-aba7-ccb25c99ec47",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"number\"]).to.eq(1);",
							"     pm.expect(pm.response.json()[\"current_boat\"]).to.eq(pm.environment.get(\"boat_id\"));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat departs slip 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa51c8ef-b581-4ca1-ae98-47b1bfb01ed6",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get slip with boat departed 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "763bb197-74a4-4eb6-8cf9-945d54ba8553",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"number\"]).to.eq(1);",
							"     pm.expect(pm.response.json()[\"current_boat\"]).to.eq(null);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add another boat 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0b092608-0e66-4a2c-bd93-8281fee7dc15",
						"exec": [
							"pm.environment.set(\"boat_id_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mega Boat\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Mega Boat\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat_id_1 arrives at slip 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f68fa46-9110-48ea-87b2-2ce88e0e69ae",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat not at slip tries to depart 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4fd4050f-a43f-4ea9-b884-d484663d0fa2",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id is at the slip with this slip_id\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid boat tries to depart slip 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2097b19d-8b1e-409f-b79e-de083695dde1",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id is at the slip with this slip_id\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "boat tries to depart invalid slip 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46d4ecd2-9ec3-4e9d-8fe6-f57d749e5bf2",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id is at the slip with this slip_id\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{invalid_slip_id}}/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{invalid_slip_id}}",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_id_1 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a2d40b21-41ba-47a9-b2f8-8ae07e4b00ca",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get slip with boat_id_1 deleted 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e748afd6-23fc-4f61-9174-01b9f4499d75",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"number\"]).to.eq(1);",
							"    pm.expect(pm.response.json()[\"current_boat\"]).to.eq(null);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9da7188f-5e49-45ee-85f6-af5d9621455d",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat wiht invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "12c7b30a-6f79-40dc-ad5c-be0d337c0844",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete slip with invalid_id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b5856f1b-16b0-4565-954a-7c75aaaee576",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No slip with this slip_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{invalid_slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{invalid_slip_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete slip 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "78045beb-5209-4e7a-ac5d-df910e8a6597",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7c2f85c9-6174-49a5-921b-130b46f15c9e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "81c0c72a-f479-4bec-83fd-20a77328d936",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}